/* 
 * nlpapi
 *
 * The powerful Natural Language Processing APIs let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.NLP.Client;
using Cloudmersive.APIClient.NET.NLP.Model;

namespace Cloudmersive.APIClient.NET.NLP.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpellCheckApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Spell check word
        /// </summary>
        /// <remarks>
        /// Spell check a word as JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>CheckJsonResponse</returns>
        CheckJsonResponse SpellCheckCheckJson (string value);

        /// <summary>
        /// Spell check word
        /// </summary>
        /// <remarks>
        /// Spell check a word as JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>ApiResponse of CheckJsonResponse</returns>
        ApiResponse<CheckJsonResponse> SpellCheckCheckJsonWithHttpInfo (string value);
        /// <summary>
        /// Check if sentence is spelled correctly
        /// </summary>
        /// <remarks>
        /// Checks whether the sentence is spelled correctly and returns the result as JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>CheckSentenceJsonResponse</returns>
        CheckSentenceJsonResponse SpellCheckCheckSentenceJson (string value);

        /// <summary>
        /// Check if sentence is spelled correctly
        /// </summary>
        /// <remarks>
        /// Checks whether the sentence is spelled correctly and returns the result as JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>ApiResponse of CheckSentenceJsonResponse</returns>
        ApiResponse<CheckSentenceJsonResponse> SpellCheckCheckSentenceJsonWithHttpInfo (string value);
        /// <summary>
        /// Spell check a sentence
        /// </summary>
        /// <remarks>
        /// Check if a sentence is spelled correctly
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence word</param>
        /// <returns>bool?</returns>
        bool? SpellCheckCheckSentenceString (string value);

        /// <summary>
        /// Spell check a sentence
        /// </summary>
        /// <remarks>
        /// Check if a sentence is spelled correctly
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence word</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> SpellCheckCheckSentenceStringWithHttpInfo (string value);
        /// <summary>
        /// Find spelling corrections
        /// </summary>
        /// <remarks>
        /// Find the spelling corrections for a word
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input word</param>
        /// <returns>string</returns>
        string SpellCheckCorrect (string value);

        /// <summary>
        /// Find spelling corrections
        /// </summary>
        /// <remarks>
        /// Find the spelling corrections for a word
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input word</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SpellCheckCorrectWithHttpInfo (string value);
        /// <summary>
        /// Find spelling corrections
        /// </summary>
        /// <remarks>
        /// Find spelling correction suggestions and return result as JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string</param>
        /// <returns>CorrectJsonResponse</returns>
        CorrectJsonResponse SpellCheckCorrectJson (string value);

        /// <summary>
        /// Find spelling corrections
        /// </summary>
        /// <remarks>
        /// Find spelling correction suggestions and return result as JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string</param>
        /// <returns>ApiResponse of CorrectJsonResponse</returns>
        ApiResponse<CorrectJsonResponse> SpellCheckCorrectJsonWithHttpInfo (string value);
        /// <summary>
        /// Spell check a word
        /// </summary>
        /// <remarks>
        /// Check if a word is spelled correctly
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string word</param>
        /// <returns>bool?</returns>
        bool? SpellCheckPost (string value);

        /// <summary>
        /// Spell check a word
        /// </summary>
        /// <remarks>
        /// Check if a word is spelled correctly
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string word</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> SpellCheckPostWithHttpInfo (string value);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Spell check word
        /// </summary>
        /// <remarks>
        /// Spell check a word as JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>Task of CheckJsonResponse</returns>
        System.Threading.Tasks.Task<CheckJsonResponse> SpellCheckCheckJsonAsync (string value);

        /// <summary>
        /// Spell check word
        /// </summary>
        /// <remarks>
        /// Spell check a word as JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>Task of ApiResponse (CheckJsonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckJsonResponse>> SpellCheckCheckJsonAsyncWithHttpInfo (string value);
        /// <summary>
        /// Check if sentence is spelled correctly
        /// </summary>
        /// <remarks>
        /// Checks whether the sentence is spelled correctly and returns the result as JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>Task of CheckSentenceJsonResponse</returns>
        System.Threading.Tasks.Task<CheckSentenceJsonResponse> SpellCheckCheckSentenceJsonAsync (string value);

        /// <summary>
        /// Check if sentence is spelled correctly
        /// </summary>
        /// <remarks>
        /// Checks whether the sentence is spelled correctly and returns the result as JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>Task of ApiResponse (CheckSentenceJsonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckSentenceJsonResponse>> SpellCheckCheckSentenceJsonAsyncWithHttpInfo (string value);
        /// <summary>
        /// Spell check a sentence
        /// </summary>
        /// <remarks>
        /// Check if a sentence is spelled correctly
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence word</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> SpellCheckCheckSentenceStringAsync (string value);

        /// <summary>
        /// Spell check a sentence
        /// </summary>
        /// <remarks>
        /// Check if a sentence is spelled correctly
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence word</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> SpellCheckCheckSentenceStringAsyncWithHttpInfo (string value);
        /// <summary>
        /// Find spelling corrections
        /// </summary>
        /// <remarks>
        /// Find the spelling corrections for a word
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input word</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SpellCheckCorrectAsync (string value);

        /// <summary>
        /// Find spelling corrections
        /// </summary>
        /// <remarks>
        /// Find the spelling corrections for a word
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input word</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SpellCheckCorrectAsyncWithHttpInfo (string value);
        /// <summary>
        /// Find spelling corrections
        /// </summary>
        /// <remarks>
        /// Find spelling correction suggestions and return result as JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string</param>
        /// <returns>Task of CorrectJsonResponse</returns>
        System.Threading.Tasks.Task<CorrectJsonResponse> SpellCheckCorrectJsonAsync (string value);

        /// <summary>
        /// Find spelling corrections
        /// </summary>
        /// <remarks>
        /// Find spelling correction suggestions and return result as JSON
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string</param>
        /// <returns>Task of ApiResponse (CorrectJsonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CorrectJsonResponse>> SpellCheckCorrectJsonAsyncWithHttpInfo (string value);
        /// <summary>
        /// Spell check a word
        /// </summary>
        /// <remarks>
        /// Check if a word is spelled correctly
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string word</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> SpellCheckPostAsync (string value);

        /// <summary>
        /// Spell check a word
        /// </summary>
        /// <remarks>
        /// Check if a word is spelled correctly
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string word</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> SpellCheckPostAsyncWithHttpInfo (string value);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpellCheckApi : ISpellCheckApi
    {
        private Cloudmersive.APIClient.NET.NLP.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpellCheckApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpellCheckApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.NLP.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.NLP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpellCheckApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpellCheckApi(Cloudmersive.APIClient.NET.NLP.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.NLP.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.NLP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.NLP.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.NLP.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Spell check word Spell check a word as JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>CheckJsonResponse</returns>
        public CheckJsonResponse SpellCheckCheckJson (string value)
        {
             ApiResponse<CheckJsonResponse> localVarResponse = SpellCheckCheckJsonWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Spell check word Spell check a word as JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>ApiResponse of CheckJsonResponse</returns>
        public ApiResponse< CheckJsonResponse > SpellCheckCheckJsonWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SpellCheckApi->SpellCheckCheckJson");

            var localVarPath = "/nlp/spellcheck/check/word/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpellCheckCheckJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckJsonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckJsonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckJsonResponse)));
        }

        /// <summary>
        /// Spell check word Spell check a word as JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>Task of CheckJsonResponse</returns>
        public async System.Threading.Tasks.Task<CheckJsonResponse> SpellCheckCheckJsonAsync (string value)
        {
             ApiResponse<CheckJsonResponse> localVarResponse = await SpellCheckCheckJsonAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Spell check word Spell check a word as JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>Task of ApiResponse (CheckJsonResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckJsonResponse>> SpellCheckCheckJsonAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SpellCheckApi->SpellCheckCheckJson");

            var localVarPath = "/nlp/spellcheck/check/word/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpellCheckCheckJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckJsonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckJsonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckJsonResponse)));
        }

        /// <summary>
        /// Check if sentence is spelled correctly Checks whether the sentence is spelled correctly and returns the result as JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>CheckSentenceJsonResponse</returns>
        public CheckSentenceJsonResponse SpellCheckCheckSentenceJson (string value)
        {
             ApiResponse<CheckSentenceJsonResponse> localVarResponse = SpellCheckCheckSentenceJsonWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if sentence is spelled correctly Checks whether the sentence is spelled correctly and returns the result as JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>ApiResponse of CheckSentenceJsonResponse</returns>
        public ApiResponse< CheckSentenceJsonResponse > SpellCheckCheckSentenceJsonWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SpellCheckApi->SpellCheckCheckSentenceJson");

            var localVarPath = "/nlp/spellcheck/check/sentence/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpellCheckCheckSentenceJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckSentenceJsonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckSentenceJsonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckSentenceJsonResponse)));
        }

        /// <summary>
        /// Check if sentence is spelled correctly Checks whether the sentence is spelled correctly and returns the result as JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>Task of CheckSentenceJsonResponse</returns>
        public async System.Threading.Tasks.Task<CheckSentenceJsonResponse> SpellCheckCheckSentenceJsonAsync (string value)
        {
             ApiResponse<CheckSentenceJsonResponse> localVarResponse = await SpellCheckCheckSentenceJsonAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if sentence is spelled correctly Checks whether the sentence is spelled correctly and returns the result as JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence</param>
        /// <returns>Task of ApiResponse (CheckSentenceJsonResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckSentenceJsonResponse>> SpellCheckCheckSentenceJsonAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SpellCheckApi->SpellCheckCheckSentenceJson");

            var localVarPath = "/nlp/spellcheck/check/sentence/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpellCheckCheckSentenceJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckSentenceJsonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CheckSentenceJsonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckSentenceJsonResponse)));
        }

        /// <summary>
        /// Spell check a sentence Check if a sentence is spelled correctly
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence word</param>
        /// <returns>bool?</returns>
        public bool? SpellCheckCheckSentenceString (string value)
        {
             ApiResponse<bool?> localVarResponse = SpellCheckCheckSentenceStringWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Spell check a sentence Check if a sentence is spelled correctly
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence word</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > SpellCheckCheckSentenceStringWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SpellCheckApi->SpellCheckCheckSentenceString");

            var localVarPath = "/nlp/spellcheck/check/sentence/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpellCheckCheckSentenceString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Spell check a sentence Check if a sentence is spelled correctly
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence word</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> SpellCheckCheckSentenceStringAsync (string value)
        {
             ApiResponse<bool?> localVarResponse = await SpellCheckCheckSentenceStringAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Spell check a sentence Check if a sentence is spelled correctly
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input sentence word</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> SpellCheckCheckSentenceStringAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SpellCheckApi->SpellCheckCheckSentenceString");

            var localVarPath = "/nlp/spellcheck/check/sentence/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpellCheckCheckSentenceString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Find spelling corrections Find the spelling corrections for a word
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input word</param>
        /// <returns>string</returns>
        public string SpellCheckCorrect (string value)
        {
             ApiResponse<string> localVarResponse = SpellCheckCorrectWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find spelling corrections Find the spelling corrections for a word
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input word</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SpellCheckCorrectWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SpellCheckApi->SpellCheckCorrect");

            var localVarPath = "/nlp/spellcheck/correct/word/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpellCheckCorrect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Find spelling corrections Find the spelling corrections for a word
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input word</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SpellCheckCorrectAsync (string value)
        {
             ApiResponse<string> localVarResponse = await SpellCheckCorrectAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find spelling corrections Find the spelling corrections for a word
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input word</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SpellCheckCorrectAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SpellCheckApi->SpellCheckCorrect");

            var localVarPath = "/nlp/spellcheck/correct/word/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpellCheckCorrect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Find spelling corrections Find spelling correction suggestions and return result as JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string</param>
        /// <returns>CorrectJsonResponse</returns>
        public CorrectJsonResponse SpellCheckCorrectJson (string value)
        {
             ApiResponse<CorrectJsonResponse> localVarResponse = SpellCheckCorrectJsonWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find spelling corrections Find spelling correction suggestions and return result as JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string</param>
        /// <returns>ApiResponse of CorrectJsonResponse</returns>
        public ApiResponse< CorrectJsonResponse > SpellCheckCorrectJsonWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SpellCheckApi->SpellCheckCorrectJson");

            var localVarPath = "/nlp/spellcheck/correct/word/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpellCheckCorrectJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CorrectJsonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CorrectJsonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CorrectJsonResponse)));
        }

        /// <summary>
        /// Find spelling corrections Find spelling correction suggestions and return result as JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string</param>
        /// <returns>Task of CorrectJsonResponse</returns>
        public async System.Threading.Tasks.Task<CorrectJsonResponse> SpellCheckCorrectJsonAsync (string value)
        {
             ApiResponse<CorrectJsonResponse> localVarResponse = await SpellCheckCorrectJsonAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find spelling corrections Find spelling correction suggestions and return result as JSON
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string</param>
        /// <returns>Task of ApiResponse (CorrectJsonResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CorrectJsonResponse>> SpellCheckCorrectJsonAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SpellCheckApi->SpellCheckCorrectJson");

            var localVarPath = "/nlp/spellcheck/correct/word/json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpellCheckCorrectJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CorrectJsonResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CorrectJsonResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CorrectJsonResponse)));
        }

        /// <summary>
        /// Spell check a word Check if a word is spelled correctly
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string word</param>
        /// <returns>bool?</returns>
        public bool? SpellCheckPost (string value)
        {
             ApiResponse<bool?> localVarResponse = SpellCheckPostWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Spell check a word Check if a word is spelled correctly
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string word</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > SpellCheckPostWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SpellCheckApi->SpellCheckPost");

            var localVarPath = "/nlp/spellcheck/check/word/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpellCheckPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Spell check a word Check if a word is spelled correctly
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string word</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> SpellCheckPostAsync (string value)
        {
             ApiResponse<bool?> localVarResponse = await SpellCheckPostAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Spell check a word Check if a word is spelled correctly
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Input string word</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> SpellCheckPostAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling SpellCheckApi->SpellCheckPost");

            var localVarPath = "/nlp/spellcheck/check/word/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpellCheckPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

    }
}
