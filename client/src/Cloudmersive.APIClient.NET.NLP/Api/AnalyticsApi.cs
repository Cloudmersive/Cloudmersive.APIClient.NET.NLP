/* 
 * nlpapiv2
 *
 * The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.NLP.Client;
using Cloudmersive.APIClient.NET.NLP.Model;

namespace Cloudmersive.APIClient.NET.NLP.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Perform Hate Speech Analysis and Detection on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Hate Speech Analysis to determine if the input contains hate speech language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input hate speech analysis request</param>
        /// <returns>HateSpeechAnalysisResponse</returns>
        HateSpeechAnalysisResponse AnalyticsHateSpeech (HateSpeechAnalysisRequest input);

        /// <summary>
        /// Perform Hate Speech Analysis and Detection on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Hate Speech Analysis to determine if the input contains hate speech language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input hate speech analysis request</param>
        /// <returns>ApiResponse of HateSpeechAnalysisResponse</returns>
        ApiResponse<HateSpeechAnalysisResponse> AnalyticsHateSpeechWithHttpInfo (HateSpeechAnalysisRequest input);
        /// <summary>
        /// Perform Profanity and Obscene Language Analysis and Detection on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input profanity analysis request</param>
        /// <returns>ProfanityAnalysisResponse</returns>
        ProfanityAnalysisResponse AnalyticsProfanity (ProfanityAnalysisRequest input);

        /// <summary>
        /// Perform Profanity and Obscene Language Analysis and Detection on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input profanity analysis request</param>
        /// <returns>ApiResponse of ProfanityAnalysisResponse</returns>
        ApiResponse<ProfanityAnalysisResponse> AnalyticsProfanityWithHttpInfo (ProfanityAnalysisRequest input);
        /// <summary>
        /// Perform Sentiment Analysis and Classification on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input sentiment analysis request</param>
        /// <returns>SentimentAnalysisResponse</returns>
        SentimentAnalysisResponse AnalyticsSentiment (SentimentAnalysisRequest input);

        /// <summary>
        /// Perform Sentiment Analysis and Classification on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input sentiment analysis request</param>
        /// <returns>ApiResponse of SentimentAnalysisResponse</returns>
        ApiResponse<SentimentAnalysisResponse> AnalyticsSentimentWithHttpInfo (SentimentAnalysisRequest input);
        /// <summary>
        /// Perform Semantic Similarity Comparison of Two Strings
        /// </summary>
        /// <remarks>
        /// Analyze two input text strings, typically sentences, and determine the semantic similarity of each.  Semantic similarity refers to the degree to which two sentences mean the same thing semantically.  Uses advanced Deep Learning to perform the semantic similarity comparison.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input similarity analysis request</param>
        /// <returns>SimilarityAnalysisResponse</returns>
        SimilarityAnalysisResponse AnalyticsSimilarity (SimilarityAnalysisRequest input);

        /// <summary>
        /// Perform Semantic Similarity Comparison of Two Strings
        /// </summary>
        /// <remarks>
        /// Analyze two input text strings, typically sentences, and determine the semantic similarity of each.  Semantic similarity refers to the degree to which two sentences mean the same thing semantically.  Uses advanced Deep Learning to perform the semantic similarity comparison.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input similarity analysis request</param>
        /// <returns>ApiResponse of SimilarityAnalysisResponse</returns>
        ApiResponse<SimilarityAnalysisResponse> AnalyticsSimilarityWithHttpInfo (SimilarityAnalysisRequest input);
        /// <summary>
        /// Perform Subjectivity and Objectivity Analysis on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input subjectivity analysis request</param>
        /// <returns>SubjectivityAnalysisResponse</returns>
        SubjectivityAnalysisResponse AnalyticsSubjectivity (SubjectivityAnalysisRequest input);

        /// <summary>
        /// Perform Subjectivity and Objectivity Analysis on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input subjectivity analysis request</param>
        /// <returns>ApiResponse of SubjectivityAnalysisResponse</returns>
        ApiResponse<SubjectivityAnalysisResponse> AnalyticsSubjectivityWithHttpInfo (SubjectivityAnalysisRequest input);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Perform Hate Speech Analysis and Detection on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Hate Speech Analysis to determine if the input contains hate speech language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input hate speech analysis request</param>
        /// <returns>Task of HateSpeechAnalysisResponse</returns>
        System.Threading.Tasks.Task<HateSpeechAnalysisResponse> AnalyticsHateSpeechAsync (HateSpeechAnalysisRequest input);

        /// <summary>
        /// Perform Hate Speech Analysis and Detection on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Hate Speech Analysis to determine if the input contains hate speech language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input hate speech analysis request</param>
        /// <returns>Task of ApiResponse (HateSpeechAnalysisResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HateSpeechAnalysisResponse>> AnalyticsHateSpeechAsyncWithHttpInfo (HateSpeechAnalysisRequest input);
        /// <summary>
        /// Perform Profanity and Obscene Language Analysis and Detection on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input profanity analysis request</param>
        /// <returns>Task of ProfanityAnalysisResponse</returns>
        System.Threading.Tasks.Task<ProfanityAnalysisResponse> AnalyticsProfanityAsync (ProfanityAnalysisRequest input);

        /// <summary>
        /// Perform Profanity and Obscene Language Analysis and Detection on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input profanity analysis request</param>
        /// <returns>Task of ApiResponse (ProfanityAnalysisResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfanityAnalysisResponse>> AnalyticsProfanityAsyncWithHttpInfo (ProfanityAnalysisRequest input);
        /// <summary>
        /// Perform Sentiment Analysis and Classification on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input sentiment analysis request</param>
        /// <returns>Task of SentimentAnalysisResponse</returns>
        System.Threading.Tasks.Task<SentimentAnalysisResponse> AnalyticsSentimentAsync (SentimentAnalysisRequest input);

        /// <summary>
        /// Perform Sentiment Analysis and Classification on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input sentiment analysis request</param>
        /// <returns>Task of ApiResponse (SentimentAnalysisResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SentimentAnalysisResponse>> AnalyticsSentimentAsyncWithHttpInfo (SentimentAnalysisRequest input);
        /// <summary>
        /// Perform Semantic Similarity Comparison of Two Strings
        /// </summary>
        /// <remarks>
        /// Analyze two input text strings, typically sentences, and determine the semantic similarity of each.  Semantic similarity refers to the degree to which two sentences mean the same thing semantically.  Uses advanced Deep Learning to perform the semantic similarity comparison.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input similarity analysis request</param>
        /// <returns>Task of SimilarityAnalysisResponse</returns>
        System.Threading.Tasks.Task<SimilarityAnalysisResponse> AnalyticsSimilarityAsync (SimilarityAnalysisRequest input);

        /// <summary>
        /// Perform Semantic Similarity Comparison of Two Strings
        /// </summary>
        /// <remarks>
        /// Analyze two input text strings, typically sentences, and determine the semantic similarity of each.  Semantic similarity refers to the degree to which two sentences mean the same thing semantically.  Uses advanced Deep Learning to perform the semantic similarity comparison.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input similarity analysis request</param>
        /// <returns>Task of ApiResponse (SimilarityAnalysisResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimilarityAnalysisResponse>> AnalyticsSimilarityAsyncWithHttpInfo (SimilarityAnalysisRequest input);
        /// <summary>
        /// Perform Subjectivity and Objectivity Analysis on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input subjectivity analysis request</param>
        /// <returns>Task of SubjectivityAnalysisResponse</returns>
        System.Threading.Tasks.Task<SubjectivityAnalysisResponse> AnalyticsSubjectivityAsync (SubjectivityAnalysisRequest input);

        /// <summary>
        /// Perform Subjectivity and Objectivity Analysis on Text
        /// </summary>
        /// <remarks>
        /// Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input subjectivity analysis request</param>
        /// <returns>Task of ApiResponse (SubjectivityAnalysisResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubjectivityAnalysisResponse>> AnalyticsSubjectivityAsyncWithHttpInfo (SubjectivityAnalysisRequest input);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnalyticsApi : IAnalyticsApi
    {
        private Cloudmersive.APIClient.NET.NLP.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyticsApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.NLP.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.NLP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnalyticsApi(Cloudmersive.APIClient.NET.NLP.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.NLP.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.NLP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.NLP.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.NLP.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Perform Hate Speech Analysis and Detection on Text Analyze input text using advanced Hate Speech Analysis to determine if the input contains hate speech language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input hate speech analysis request</param>
        /// <returns>HateSpeechAnalysisResponse</returns>
        public HateSpeechAnalysisResponse AnalyticsHateSpeech (HateSpeechAnalysisRequest input)
        {
             ApiResponse<HateSpeechAnalysisResponse> localVarResponse = AnalyticsHateSpeechWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform Hate Speech Analysis and Detection on Text Analyze input text using advanced Hate Speech Analysis to determine if the input contains hate speech language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input hate speech analysis request</param>
        /// <returns>ApiResponse of HateSpeechAnalysisResponse</returns>
        public ApiResponse< HateSpeechAnalysisResponse > AnalyticsHateSpeechWithHttpInfo (HateSpeechAnalysisRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AnalyticsApi->AnalyticsHateSpeech");

            var localVarPath = "/nlp-v2/analytics/hate-speech";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsHateSpeech", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HateSpeechAnalysisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HateSpeechAnalysisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HateSpeechAnalysisResponse)));
        }

        /// <summary>
        /// Perform Hate Speech Analysis and Detection on Text Analyze input text using advanced Hate Speech Analysis to determine if the input contains hate speech language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input hate speech analysis request</param>
        /// <returns>Task of HateSpeechAnalysisResponse</returns>
        public async System.Threading.Tasks.Task<HateSpeechAnalysisResponse> AnalyticsHateSpeechAsync (HateSpeechAnalysisRequest input)
        {
             ApiResponse<HateSpeechAnalysisResponse> localVarResponse = await AnalyticsHateSpeechAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform Hate Speech Analysis and Detection on Text Analyze input text using advanced Hate Speech Analysis to determine if the input contains hate speech language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input hate speech analysis request</param>
        /// <returns>Task of ApiResponse (HateSpeechAnalysisResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HateSpeechAnalysisResponse>> AnalyticsHateSpeechAsyncWithHttpInfo (HateSpeechAnalysisRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AnalyticsApi->AnalyticsHateSpeech");

            var localVarPath = "/nlp-v2/analytics/hate-speech";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsHateSpeech", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HateSpeechAnalysisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HateSpeechAnalysisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HateSpeechAnalysisResponse)));
        }

        /// <summary>
        /// Perform Profanity and Obscene Language Analysis and Detection on Text Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input profanity analysis request</param>
        /// <returns>ProfanityAnalysisResponse</returns>
        public ProfanityAnalysisResponse AnalyticsProfanity (ProfanityAnalysisRequest input)
        {
             ApiResponse<ProfanityAnalysisResponse> localVarResponse = AnalyticsProfanityWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform Profanity and Obscene Language Analysis and Detection on Text Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input profanity analysis request</param>
        /// <returns>ApiResponse of ProfanityAnalysisResponse</returns>
        public ApiResponse< ProfanityAnalysisResponse > AnalyticsProfanityWithHttpInfo (ProfanityAnalysisRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AnalyticsApi->AnalyticsProfanity");

            var localVarPath = "/nlp-v2/analytics/profanity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsProfanity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfanityAnalysisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfanityAnalysisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfanityAnalysisResponse)));
        }

        /// <summary>
        /// Perform Profanity and Obscene Language Analysis and Detection on Text Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input profanity analysis request</param>
        /// <returns>Task of ProfanityAnalysisResponse</returns>
        public async System.Threading.Tasks.Task<ProfanityAnalysisResponse> AnalyticsProfanityAsync (ProfanityAnalysisRequest input)
        {
             ApiResponse<ProfanityAnalysisResponse> localVarResponse = await AnalyticsProfanityAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform Profanity and Obscene Language Analysis and Detection on Text Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input profanity analysis request</param>
        /// <returns>Task of ApiResponse (ProfanityAnalysisResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfanityAnalysisResponse>> AnalyticsProfanityAsyncWithHttpInfo (ProfanityAnalysisRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AnalyticsApi->AnalyticsProfanity");

            var localVarPath = "/nlp-v2/analytics/profanity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsProfanity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfanityAnalysisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProfanityAnalysisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfanityAnalysisResponse)));
        }

        /// <summary>
        /// Perform Sentiment Analysis and Classification on Text Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input sentiment analysis request</param>
        /// <returns>SentimentAnalysisResponse</returns>
        public SentimentAnalysisResponse AnalyticsSentiment (SentimentAnalysisRequest input)
        {
             ApiResponse<SentimentAnalysisResponse> localVarResponse = AnalyticsSentimentWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform Sentiment Analysis and Classification on Text Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input sentiment analysis request</param>
        /// <returns>ApiResponse of SentimentAnalysisResponse</returns>
        public ApiResponse< SentimentAnalysisResponse > AnalyticsSentimentWithHttpInfo (SentimentAnalysisRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AnalyticsApi->AnalyticsSentiment");

            var localVarPath = "/nlp-v2/analytics/sentiment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsSentiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SentimentAnalysisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SentimentAnalysisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SentimentAnalysisResponse)));
        }

        /// <summary>
        /// Perform Sentiment Analysis and Classification on Text Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input sentiment analysis request</param>
        /// <returns>Task of SentimentAnalysisResponse</returns>
        public async System.Threading.Tasks.Task<SentimentAnalysisResponse> AnalyticsSentimentAsync (SentimentAnalysisRequest input)
        {
             ApiResponse<SentimentAnalysisResponse> localVarResponse = await AnalyticsSentimentAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform Sentiment Analysis and Classification on Text Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input sentiment analysis request</param>
        /// <returns>Task of ApiResponse (SentimentAnalysisResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SentimentAnalysisResponse>> AnalyticsSentimentAsyncWithHttpInfo (SentimentAnalysisRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AnalyticsApi->AnalyticsSentiment");

            var localVarPath = "/nlp-v2/analytics/sentiment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsSentiment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SentimentAnalysisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SentimentAnalysisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SentimentAnalysisResponse)));
        }

        /// <summary>
        /// Perform Semantic Similarity Comparison of Two Strings Analyze two input text strings, typically sentences, and determine the semantic similarity of each.  Semantic similarity refers to the degree to which two sentences mean the same thing semantically.  Uses advanced Deep Learning to perform the semantic similarity comparison.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input similarity analysis request</param>
        /// <returns>SimilarityAnalysisResponse</returns>
        public SimilarityAnalysisResponse AnalyticsSimilarity (SimilarityAnalysisRequest input)
        {
             ApiResponse<SimilarityAnalysisResponse> localVarResponse = AnalyticsSimilarityWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform Semantic Similarity Comparison of Two Strings Analyze two input text strings, typically sentences, and determine the semantic similarity of each.  Semantic similarity refers to the degree to which two sentences mean the same thing semantically.  Uses advanced Deep Learning to perform the semantic similarity comparison.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input similarity analysis request</param>
        /// <returns>ApiResponse of SimilarityAnalysisResponse</returns>
        public ApiResponse< SimilarityAnalysisResponse > AnalyticsSimilarityWithHttpInfo (SimilarityAnalysisRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AnalyticsApi->AnalyticsSimilarity");

            var localVarPath = "/nlp-v2/analytics/similarity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsSimilarity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimilarityAnalysisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimilarityAnalysisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimilarityAnalysisResponse)));
        }

        /// <summary>
        /// Perform Semantic Similarity Comparison of Two Strings Analyze two input text strings, typically sentences, and determine the semantic similarity of each.  Semantic similarity refers to the degree to which two sentences mean the same thing semantically.  Uses advanced Deep Learning to perform the semantic similarity comparison.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input similarity analysis request</param>
        /// <returns>Task of SimilarityAnalysisResponse</returns>
        public async System.Threading.Tasks.Task<SimilarityAnalysisResponse> AnalyticsSimilarityAsync (SimilarityAnalysisRequest input)
        {
             ApiResponse<SimilarityAnalysisResponse> localVarResponse = await AnalyticsSimilarityAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform Semantic Similarity Comparison of Two Strings Analyze two input text strings, typically sentences, and determine the semantic similarity of each.  Semantic similarity refers to the degree to which two sentences mean the same thing semantically.  Uses advanced Deep Learning to perform the semantic similarity comparison.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input similarity analysis request</param>
        /// <returns>Task of ApiResponse (SimilarityAnalysisResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimilarityAnalysisResponse>> AnalyticsSimilarityAsyncWithHttpInfo (SimilarityAnalysisRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AnalyticsApi->AnalyticsSimilarity");

            var localVarPath = "/nlp-v2/analytics/similarity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsSimilarity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimilarityAnalysisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimilarityAnalysisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimilarityAnalysisResponse)));
        }

        /// <summary>
        /// Perform Subjectivity and Objectivity Analysis on Text Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input subjectivity analysis request</param>
        /// <returns>SubjectivityAnalysisResponse</returns>
        public SubjectivityAnalysisResponse AnalyticsSubjectivity (SubjectivityAnalysisRequest input)
        {
             ApiResponse<SubjectivityAnalysisResponse> localVarResponse = AnalyticsSubjectivityWithHttpInfo(input);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform Subjectivity and Objectivity Analysis on Text Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input subjectivity analysis request</param>
        /// <returns>ApiResponse of SubjectivityAnalysisResponse</returns>
        public ApiResponse< SubjectivityAnalysisResponse > AnalyticsSubjectivityWithHttpInfo (SubjectivityAnalysisRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AnalyticsApi->AnalyticsSubjectivity");

            var localVarPath = "/nlp-v2/analytics/subjectivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsSubjectivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubjectivityAnalysisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubjectivityAnalysisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubjectivityAnalysisResponse)));
        }

        /// <summary>
        /// Perform Subjectivity and Objectivity Analysis on Text Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input subjectivity analysis request</param>
        /// <returns>Task of SubjectivityAnalysisResponse</returns>
        public async System.Threading.Tasks.Task<SubjectivityAnalysisResponse> AnalyticsSubjectivityAsync (SubjectivityAnalysisRequest input)
        {
             ApiResponse<SubjectivityAnalysisResponse> localVarResponse = await AnalyticsSubjectivityAsyncWithHttpInfo(input);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform Subjectivity and Objectivity Analysis on Text Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.NLP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input">Input subjectivity analysis request</param>
        /// <returns>Task of ApiResponse (SubjectivityAnalysisResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubjectivityAnalysisResponse>> AnalyticsSubjectivityAsyncWithHttpInfo (SubjectivityAnalysisRequest input)
        {
            // verify the required parameter 'input' is set
            if (input == null)
                throw new ApiException(400, "Missing required parameter 'input' when calling AnalyticsApi->AnalyticsSubjectivity");

            var localVarPath = "/nlp-v2/analytics/subjectivity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyticsSubjectivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubjectivityAnalysisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubjectivityAnalysisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubjectivityAnalysisResponse)));
        }

    }
}
